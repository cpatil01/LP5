// HPC MINMAX PRACTICAL 3


#include<iostream>
#include<vector>
#include<limits.h>
#include<omp.h>

using namespace std;

void min_reduction(vector<int>& arr){
  
    int min_value = INT_MAX;
    #pragma omp parallel reduction(min:min_value)
    for(int i = 0 ; i<arr.size() ; i++){
        if(min_value > arr[i]){
            min_value = arr[i];
        }
    }
    
    cout<<"Minimum Value : "<<min_value<<endl;
    
    
}


void max_reduction(vector<int>& arr){
    
    int max_value = INT_MIN;
    #pragma omp parallel reduction(max:max_value)
    for(int i = 0 ; i<arr.size() ; i++){
        if(max_value < arr[i]){
            max_value = arr[i];
        }
    }
    
    cout<<"Maximum Value : "<<max_value <<endl;
    
}

void sum_reduction(vector<int>& arr){
    
    int sum = 0;
    #pragma omp parallel reduction(+:sum)
    for(int i = 0 ; i<arr.size() ; i++){
       
       sum = sum + arr[i];
       
    }
    
    cout<<"Sum : "  <<sum <<endl;
    
}

void avg_reduction(vector<int>& arr){
    
    int sum = 0;
    #pragma omp parallel reduction(+:sum)
    for(int i = 0 ; i<arr.size() ; i++){
       
       sum = sum + arr[i];
       
    }
    
    cout<<"Average : "  <<(double)sum/arr.size() <<endl;
    
}




int main(){
    
    vector<int> arr ={5,2,9,1,7,6,8,3,4};
    

    
    min_reduction(arr);
    

    
    max_reduction(arr);
    
    sum_reduction(arr);
    
    avg_reduction(arr);
    
    return 0;
    
    }
    



